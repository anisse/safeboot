{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Safe Boot: Booting Linux Safely Goals Safe Boot has four goals to improve the safety of booting Linux on normal laptops: Booting only code that is authorized by the system owner (by installing a hardware protected platform key for the kernel and initrd) Streamlining the encrypted disk boot process (by storing keys in the TPM, and only unsealing them if the firmware and configuration is unmodified) Reducing the attack surface (by enabling Linux kernel features to enable hardware protection features and to de-privilege the root account) Protecting the runtime system integrity (by optionally booting from a read-only root with dmverity and signed root hash) Why safeboot? The slightly more secure Heads firmware is a better choice for user freedom since it replaces the proprietary firmware with open source. However, Heads and LinuxBoot only support a limited number of mainboards and systems, while safeboot's objective is to work with existing commodity hardware and UEFI SecureBoot mechanisms, as well as relatively stock Linux distributions. The problem is that configuring all of the pieces for UEFI Secure Boot, generating keys in hardware tokens, signing kernels, and integrating LUKS disk encryption with the TPM is very complex. There are numerous guides that walk through individual pieces of this process, but most of them are very fine-grained and require far too many steps to complete. End users need a tool that wraps up all of the complexity into the few operations that they need from day to day: signing new kernels, decrypting their disks at boot, protecting the system from runtime attackers, etc. safeboot is (an early version of) that tool! Links Installation Instructions Frequently Asked Questions safeboot subcommands Source code","title":"Overview"},{"location":"#safe-boot-booting-linux-safely","text":"","title":"Safe Boot: Booting Linux Safely"},{"location":"#goals","text":"Safe Boot has four goals to improve the safety of booting Linux on normal laptops: Booting only code that is authorized by the system owner (by installing a hardware protected platform key for the kernel and initrd) Streamlining the encrypted disk boot process (by storing keys in the TPM, and only unsealing them if the firmware and configuration is unmodified) Reducing the attack surface (by enabling Linux kernel features to enable hardware protection features and to de-privilege the root account) Protecting the runtime system integrity (by optionally booting from a read-only root with dmverity and signed root hash)","title":"Goals"},{"location":"#why-safeboot","text":"The slightly more secure Heads firmware is a better choice for user freedom since it replaces the proprietary firmware with open source. However, Heads and LinuxBoot only support a limited number of mainboards and systems, while safeboot's objective is to work with existing commodity hardware and UEFI SecureBoot mechanisms, as well as relatively stock Linux distributions. The problem is that configuring all of the pieces for UEFI Secure Boot, generating keys in hardware tokens, signing kernels, and integrating LUKS disk encryption with the TPM is very complex. There are numerous guides that walk through individual pieces of this process, but most of them are very fine-grained and require far too many steps to complete. End users need a tool that wraps up all of the complexity into the few operations that they need from day to day: signing new kernels, decrypting their disks at boot, protecting the system from runtime attackers, etc. safeboot is (an early version of) that tool!","title":"Why safeboot?"},{"location":"#links","text":"Installation Instructions Frequently Asked Questions safeboot subcommands Source code","title":"Links"},{"location":"faq/","text":"Frequently Asked Questions What is the threat model? safeboot intends to protect the integrity of the boot process and runtime integrity of the system against adversaries with external physical access to the device, as well as limited internal physical access. Reprogramming the code in SPI flash is detected by Intel Bootguard's verification of the IBB during boot Writing new platform keys in the SPI flash is detected by measurement of the UEFI configuration into the TPM TPM tampering on the LPC bus is not necessarily detectable by this system; an adversary with unlimited internal physical access can also probe sealed secrets (TODO: add TPM PIN for high assurance users) fTPM tampering is out of scope since the ME is the root of all trust in the system Booting from an unauthorized external device is prevented since only PK signed executables will be loaded. Adversaries with physical write access to the disk can't change the kernel or initrd on the drive since the signature is checked when they are loaded into RAM. Adversaries with write access to the root filesystem can't change any of the lockdown configuration since their modifications will be detectable by the dmverity hashes. They can't recompute the hashes since the root is signed by the PK. Run time access to the disk encryption key is prevented by the Linux kernel keyring mechanism, even against an adversary with root access. The Linux lockdown patches prevent a user with root access from loading new kernel modules, modifying the disk image, or poking at raw memory. TODO: prevent external media access, list of modules to not load, etc Why does the TPM unsealing fail often? It's super fragile right now. Need to reconsider which PCRs are included and what they mean. Suggestions welcome! How do I write to the root filesystem? With SIP enabled it is not possible to modify the root filesystem. You must reboot into recovery mode with safeboot recovery-reboot and decrypt the disk with the recovery password. Once decrypted, you can run safeboot remount to unlock the raw device and remount it rw . After making modifications, it is necessary to sign the new root hashes with safeboot linux-sign . What happens if I lose the signing key? The best solution is to authenticate with the supervisor password to the UEFI Setup, re-enter SecureBoot setup mode and clear the key database, then boot into recovery mode. You can then re-run safeboot yubikey-init or safeboot key-init and safeboot uefi-sign-keys to repopulate the database, and safeboot recovery-sign as well as safeboot linux-sign to re-sign the two kernel images, boot into the linux image and re-seal the LUKS key into the TPM with safeboot luks-seal . Is it possible to reset the UEFI or BIOS password? On modern Thinkpads the UEFI password is in the EC, not in the SPI flash. You need a Bootguard bypass to get into Setup in that case; perhaps someone has some zerodays that will give them access... Does it work on the Thinkpad 701c? Unfortunately the wonderful butterfly keyboard Thinkpad predates UEFI by a few years, so it does not have a very secure boot process. The X1 Carbon is a much nicer replacement.","title":"FAQ"},{"location":"faq/#frequently-asked-questions","text":"","title":"Frequently Asked Questions"},{"location":"faq/#what-is-the-threat-model","text":"safeboot intends to protect the integrity of the boot process and runtime integrity of the system against adversaries with external physical access to the device, as well as limited internal physical access. Reprogramming the code in SPI flash is detected by Intel Bootguard's verification of the IBB during boot Writing new platform keys in the SPI flash is detected by measurement of the UEFI configuration into the TPM TPM tampering on the LPC bus is not necessarily detectable by this system; an adversary with unlimited internal physical access can also probe sealed secrets (TODO: add TPM PIN for high assurance users) fTPM tampering is out of scope since the ME is the root of all trust in the system Booting from an unauthorized external device is prevented since only PK signed executables will be loaded. Adversaries with physical write access to the disk can't change the kernel or initrd on the drive since the signature is checked when they are loaded into RAM. Adversaries with write access to the root filesystem can't change any of the lockdown configuration since their modifications will be detectable by the dmverity hashes. They can't recompute the hashes since the root is signed by the PK. Run time access to the disk encryption key is prevented by the Linux kernel keyring mechanism, even against an adversary with root access. The Linux lockdown patches prevent a user with root access from loading new kernel modules, modifying the disk image, or poking at raw memory. TODO: prevent external media access, list of modules to not load, etc","title":"What is the threat model?"},{"location":"faq/#why-does-the-tpm-unsealing-fail-often","text":"It's super fragile right now. Need to reconsider which PCRs are included and what they mean. Suggestions welcome!","title":"Why does the TPM unsealing fail often?"},{"location":"faq/#how-do-i-write-to-the-root-filesystem","text":"With SIP enabled it is not possible to modify the root filesystem. You must reboot into recovery mode with safeboot recovery-reboot and decrypt the disk with the recovery password. Once decrypted, you can run safeboot remount to unlock the raw device and remount it rw . After making modifications, it is necessary to sign the new root hashes with safeboot linux-sign .","title":"How do I write to the root filesystem?"},{"location":"faq/#what-happens-if-i-lose-the-signing-key","text":"The best solution is to authenticate with the supervisor password to the UEFI Setup, re-enter SecureBoot setup mode and clear the key database, then boot into recovery mode. You can then re-run safeboot yubikey-init or safeboot key-init and safeboot uefi-sign-keys to repopulate the database, and safeboot recovery-sign as well as safeboot linux-sign to re-sign the two kernel images, boot into the linux image and re-seal the LUKS key into the TPM with safeboot luks-seal .","title":"What happens if I lose the signing key?"},{"location":"faq/#is-it-possible-to-reset-the-uefi-or-bios-password","text":"On modern Thinkpads the UEFI password is in the EC, not in the SPI flash. You need a Bootguard bypass to get into Setup in that case; perhaps someone has some zerodays that will give them access...","title":"Is it possible to reset the UEFI or BIOS password?"},{"location":"faq/#does-it-work-on-the-thinkpad-701c","text":"Unfortunately the wonderful butterfly keyboard Thinkpad predates UEFI by a few years, so it does not have a very secure boot process. The X1 Carbon is a much nicer replacement.","title":"Does it work on the Thinkpad 701c?"},{"location":"install/","text":"Safe Boot: Booting Linux Safely Danger Be careful! When following these instructions: it is possible to lock yourself out from your own machine if you forget some of the passwords. It is best to try this on a non-production system until you're certain that you understand how to use the recovery mode to fix bad kernel signatures or hashes. This guide was written for a Thinkpad X1 Carbon Gen 6 running Ubuntu 20.04. Unfortunately there has been churn in the tpm2 tools, so the Debian package does not work on 18.04. The outline for configuring safeboot requires some knowledge of the command line and familiarity with running commands as root with sudo . Releases for the the safeboot Debian package are in safeboot/releases . tl;dr Set UEFI SecureBoot setup mode Install Ubuntu 20.04, configure encrypted LVM partition Resizing '/' to 8GB during the install if you want to enable SIP wget https://github.com/osresearch/safeboot/releases/download/release-0.4/safeboot_0.4_amd64.deb` sudo apt install safeboot_0.4_amd64.deb` sudo safeboot yubikey-init /CN=foo/ # or safeboot key-init if you don't have a token sudo safeboot uefi-key-sign sudo safeboot recovery-sign sudo safeboot recovery-reboot # Should reboot into the recovery image. Login as usual. sudo safeboot luks-seal` sudo update-initramfs -u` sudo safeboot sip-init # if you want to enable SIP mode sudo safeboot recovery-sign sudo safeboot recovery-reboot # Should reboot into the recovery image again, with `/` mounted read-only. sudo safeboot linux-sign sudo reboot # Reboot one more time, now into dmverity protect Linux image... sudo safeboot luks-seal sudo reboot After this final reboot, the UEFI SecureBoot database will have the public signing keys, the UEFI boot manager will have entries for linux (which boots with a read-only dmverity protected root filesystem) and recovery (which boots with a root filesystem that can be remounted read-write), TPM should contain the disk encryption secret sealed to the linux boot mode, and now the disk should unlock automatically as long as no one tampers with the device. For more details as to how this all works, read on... Initial Setup This is done once when the system is being setup to use Safe Boot mode. Note that the hardware token and key signing portions can be done offline on a separate disconnected machine and then signed keys copied to the machine. UEFI firmware configuration The goal of these configuration changes are to remove several of the easy attacks such as booting from external disks, modifying kernel or initrd on disk, changing kernel command line parameters, as well as some of the more esoteric ones like DMA attacks against the Thunderbolt ports during the boot process. SecureBoot: Enter setup mode, erase keys Supervisor password (do not lose it! it is very difficult to bypass) Tamper switches: require supervisor password Thunderbolt 3: Disabled TPM: Enabled UEFI Secure Boot signing keys UEFI Secure Boot settings that the system will only run bootloaders that are signed by keys in the SPI flash. By default these keys are the OEM and Microsoft, and Microsoft will sign anyone else's key for $99, so it is important to replace these keys with ones under control of the computer owner. There is typically a signed \"shim\" that transfers control to the unsigned grub bootloader and kernel, which is problematic for security. A safer way to boot is to package the kernel, initrd and command line into a single EFI executable that is signed by the computer owner's key. This also reduces the attack surface by removing grub and the overly complicated config files, as well as speeds up the boot process a little bit. The owner key can be generated by openssl and stored offline, although using a hardware token like a yubikey greatly enhances the security of the system since even with root access an attacker can't gain persistence in the / or in the kernel. OpenSSL key generation First step is to generate a new key that will be used for UEFI SecureBoot: sudo safeboot key-init /CN=foo/OU=bar/O=example.com/ The key-init subcommand will generate a password protected RSA2048 key and store it in /etc/safeboot/ along with the public certificate. The password provided here will be required to sign new kernel images and initrds, so don't lose it! TODO: What is the purpose of the x509 subject? Yubikey key generation Note Skip this if you have already initialized your hardware token and enrolled your keys in the UEFI SecureBoot database. Running it again will erase the keys from your hardware token. First step is to generate a new key that will be used for UEFI SecureBoot: sudo safeboot yubikey-init /CN=foo/OU=bar/O=example.com/ The yubikey-init subcommand will do several steps: Use ykpersonalize to enable CCID mode. (TODO) Generate a new private key inside the Yubikey and export the public key Self-sign the public key to generate a new x509 certificate Reimport the certificate into the Yubikey so that UEFI variables and images can be signed with the hardware token. The public certificate is stored in /etc/safeboot/cert.pem . The private key never leaves the hardware token so it is much more difficult for an adversary to clone. Enrolling UEFI Platform Keys Replacing the UEFI Platform Key with the generated x509 cert requires that the UEFI SecureBoot firmware be put into \" Setup mode \". On the Thinkpads, select Reset to Setup Mode and Clear All Secure Boot Keys , then boot into Linux. To load the public key from /etc/safeboot/cert.pem into the UEFI secure boot key database: sudo safeboot uefi-sign-keys Once the key has been generated, the x509 certificate needs to be reformatted to be added to the UEFI Secure Boot platform key ( PK ), Key-Exchange Key ( KEK ) and as a key database entry ( db ). Each of these updates needs to be signed with the Platform Key; in the case of the PK it is self-signed. The safeboot uefi-sign-keys subcommand will: Generate the three EFI public key variables updates (UEFI platform key ( PK ), key-exchange key ( KEK ) and database ( db )) Sign the EFI variables with the Yubikey or OpenSSL key (will require a PIN authentication for each variable) Store the signed public certificates into the firmware. Danger Before you reboot! If you have not signed the kernel and initrd as described above, the system will not boot and you will have to disable UEFI Secure Boot to get back into the machine. Signed Linux recovery kernel Warning If you don't have a recovery entry in the EFI boot manager on the disk, you would need to have a USB drive signed with a key in the UEFI db to recover from errors. The next step is to use the Yubikey or OpenSSL key to sign and install a recovery kernel, which will be able to read/write mount the root filesystem, and does not have TPM sealing keys, so it will always require a recovery password to decrypt the disk. sudo safeboot recovery-sign This command will: Add UEFI boot menu item for recovery kernel Create a directory for it in the EFI System Partition (\"ESP\") Merge the vmlinux, initrd and command line into a single EFI executable Sign the merged EFI executable Typically you will not have to redo this command since the normal kernel will be hashed and signed during updates. The one exception is that once SIP mode is enabled you will have to resign the recovery image as well to ensure that it doesn't accidentally write to the / file system and corrupt the hashes. TPM Configuration The command to seal the LUKS disk encryption key into the TPM is: sudo safeboot luks-seal sudo update-initramfs -u The very first time this is run you will need to also rebuild the initrd with the new crypttab and hooks in place. The luks-seal subcommand will: Create a new disk encryption key with random data Read the current PCRs, seal new key into the TPM with these PCRs Add new key slot to disk with new key (will require the recovery password) Add initramfs building hooks Modify /etc/crypttab entry to call unlock script if necessary The Trusted Platform Module serves two purposes in securing the process: it helps validate that the firmware and boot configuration is unchanged, and it streamlines the boot process by providing the key for encrypted disks. On modern systems Boot Guard ensures that the initial boot block is measured into the TPM, so a local attacker shouldn't be able to modify the SPI flash contents to bypass the measurements, or to add their own keys to the UEFI key database. (Subject to various CVE's and TOCTOUs, etc) Note The TPM PCRs are somewhat fragile; they include hashes of the ROM images, the EFI executables that have been run along the boot path, etc. For example, entering the UEFI Setup menu will cause different measurements, so the TPM will not automatically unseal on the same boot that the user has entered the setup application. System Integrity Protection mode Note The \"SIP\" mode is optional and ensures that even an attacker with root priviledges can't make persistent changes to the contents of the root filesystem. It uses the same dmverity as Android's verified boot mode. The root of the dm-verity Merkle-tree is passed to the kernel as part of the signed command line, ensuring that an attacker can't change anything on the filesystem without access to the signing key. Any modifications to the filesystem will be detected when the modified blocks are read, allowing the system to enter recovery mode to protect its data. RO and RW Partition setup There is some manual work in a live CD that needs to be done to prepare the system for SIP mode (since / can't be mounted while it is worked on); it is easiest to do this before setting the SecureBoot config so that you can still boot a stock Live CD. Ubuntu installer used to allow you to configure the partitions at install time, but for some reason it no longer does so. The root filesystem needs to be resized so that hash computation doesn't take forever, /home and /var need to be split into a separate mounts, /tmp needs to be a symlink to /var/tmp , etc. So boot into a live CD, open a terminal and run these commands (change /dev/sda3 to the physical disk that you've installed on): sudo cryptsetup luksOpen /dev/sda3 sda3_crypt sudo vgscan sudo fsck -f /dev/vgubuntu/root sudo resize2fs /dev/vgubuntu/root 8G # This will take a while sudo lvresize --size 8G /dev/vgubuntu/root Once that is done you can reboot into the system and configure SIP (which will setup the /var and /home filesystems, add them to /etc/fstab , relocate /tmp , build the initial dmverity hashes, and add the signed linux to the efi boot menu): safeboot sip-init Hasing and signing the RO root filesystem When exiting recovery mode it is necessary to rehash the root filesystem and sign the kernel command line: sudo safeboot linux-sign The linux-sign command will: unmount / and remount it ro fsck / to ensure that it is clean run veritysetup format to compute the Merkle-tree for /dev/vgubuntu/root write the hashes to /dev/vgubuntu/hashes merge the linux kernel, initrd, and a command line with the dmverity root hash into an EFI executable sign this executable and install it as the default entry in the EFI boot manager Because this might change the EFI boot manager, it is necessary to reboot into the SIP mode and then re-seal the TPM key with safeboot luks-seal as documented above. TODO: Detect changes and notify the use rather than just EIO . Updates Nothing ever stays static, so it is important to consider the steps for updating the system. Frequently the root file system and kernel will be updated together, so these steps can be batched. Hopefully TPM re-sealing doesn't have to happen as often, since it requires access to the disk encryption recovery key. Root filesystem updates To re-enter recovery mode, remount the / filesystem read/write and re-hash the filesystem for normal mode: sudo safeboot recovery-reboot # enter the disk recovery password and login sudo safeboot remount # do stuff to / like apt-get ... sudo safeboot linux-sign reboot The recovery-reboot and remount subcommands: Set the UEFI Boot Manager BootNext to recovery Reboot the machine Require a manual disk decryption recovery code Runs blockdev --setrw to re-enable writes to the root device Runs mount -o rw,remount / to re-enable writes to the root filesystem After updating the file system with tools like apt install ... , the linux-sign subcommand will: Run mount -o ro,remount / to make the root filesystem readonly fsck / to ensure that it is clean veritysetup format to compute the merkle-tree Use the Yubikey or OpenSSL key to sign the merkle-tree root hash Reboot to the new read-only runtime If you are maintaining a fleet of machines, these could be done offline and the block image pushed to the system for installation. Kernel and initramfs update Re-generate /boot/initrd and /boot/vmlinuz Merge the kernel, initrd and command line into a single EFI executable Use the hardware token to sign that executable Copy the signed image to the EFI boot partition These could be done offline and the block image pushed to the system for installation UEFI firmware update If there are any updates to the UEFI firmware, such as changing the Setup variable, then the TPM sealed keys will no longer be accessible and the recovery key will be necessary to re-seal the drive. This requires access to the recovery key since a new random key is generated and needs to be stored into a keyslot on the drive.","title":"Installation"},{"location":"install/#safe-boot-booting-linux-safely","text":"Danger Be careful! When following these instructions: it is possible to lock yourself out from your own machine if you forget some of the passwords. It is best to try this on a non-production system until you're certain that you understand how to use the recovery mode to fix bad kernel signatures or hashes. This guide was written for a Thinkpad X1 Carbon Gen 6 running Ubuntu 20.04. Unfortunately there has been churn in the tpm2 tools, so the Debian package does not work on 18.04. The outline for configuring safeboot requires some knowledge of the command line and familiarity with running commands as root with sudo . Releases for the the safeboot Debian package are in safeboot/releases .","title":"Safe Boot: Booting Linux Safely"},{"location":"install/#tldr","text":"Set UEFI SecureBoot setup mode Install Ubuntu 20.04, configure encrypted LVM partition Resizing '/' to 8GB during the install if you want to enable SIP wget https://github.com/osresearch/safeboot/releases/download/release-0.4/safeboot_0.4_amd64.deb` sudo apt install safeboot_0.4_amd64.deb` sudo safeboot yubikey-init /CN=foo/ # or safeboot key-init if you don't have a token sudo safeboot uefi-key-sign sudo safeboot recovery-sign sudo safeboot recovery-reboot # Should reboot into the recovery image. Login as usual. sudo safeboot luks-seal` sudo update-initramfs -u` sudo safeboot sip-init # if you want to enable SIP mode sudo safeboot recovery-sign sudo safeboot recovery-reboot # Should reboot into the recovery image again, with `/` mounted read-only. sudo safeboot linux-sign sudo reboot # Reboot one more time, now into dmverity protect Linux image... sudo safeboot luks-seal sudo reboot After this final reboot, the UEFI SecureBoot database will have the public signing keys, the UEFI boot manager will have entries for linux (which boots with a read-only dmverity protected root filesystem) and recovery (which boots with a root filesystem that can be remounted read-write), TPM should contain the disk encryption secret sealed to the linux boot mode, and now the disk should unlock automatically as long as no one tampers with the device. For more details as to how this all works, read on...","title":"tl;dr"},{"location":"install/#initial-setup","text":"This is done once when the system is being setup to use Safe Boot mode. Note that the hardware token and key signing portions can be done offline on a separate disconnected machine and then signed keys copied to the machine.","title":"Initial Setup"},{"location":"install/#uefi-firmware-configuration","text":"The goal of these configuration changes are to remove several of the easy attacks such as booting from external disks, modifying kernel or initrd on disk, changing kernel command line parameters, as well as some of the more esoteric ones like DMA attacks against the Thunderbolt ports during the boot process. SecureBoot: Enter setup mode, erase keys Supervisor password (do not lose it! it is very difficult to bypass) Tamper switches: require supervisor password Thunderbolt 3: Disabled TPM: Enabled","title":"UEFI firmware configuration"},{"location":"install/#uefi-secure-boot-signing-keys","text":"UEFI Secure Boot settings that the system will only run bootloaders that are signed by keys in the SPI flash. By default these keys are the OEM and Microsoft, and Microsoft will sign anyone else's key for $99, so it is important to replace these keys with ones under control of the computer owner. There is typically a signed \"shim\" that transfers control to the unsigned grub bootloader and kernel, which is problematic for security. A safer way to boot is to package the kernel, initrd and command line into a single EFI executable that is signed by the computer owner's key. This also reduces the attack surface by removing grub and the overly complicated config files, as well as speeds up the boot process a little bit. The owner key can be generated by openssl and stored offline, although using a hardware token like a yubikey greatly enhances the security of the system since even with root access an attacker can't gain persistence in the / or in the kernel.","title":"UEFI Secure Boot signing keys"},{"location":"install/#openssl-key-generation","text":"First step is to generate a new key that will be used for UEFI SecureBoot: sudo safeboot key-init /CN=foo/OU=bar/O=example.com/ The key-init subcommand will generate a password protected RSA2048 key and store it in /etc/safeboot/ along with the public certificate. The password provided here will be required to sign new kernel images and initrds, so don't lose it! TODO: What is the purpose of the x509 subject?","title":"OpenSSL key generation"},{"location":"install/#yubikey-key-generation","text":"Note Skip this if you have already initialized your hardware token and enrolled your keys in the UEFI SecureBoot database. Running it again will erase the keys from your hardware token. First step is to generate a new key that will be used for UEFI SecureBoot: sudo safeboot yubikey-init /CN=foo/OU=bar/O=example.com/ The yubikey-init subcommand will do several steps: Use ykpersonalize to enable CCID mode. (TODO) Generate a new private key inside the Yubikey and export the public key Self-sign the public key to generate a new x509 certificate Reimport the certificate into the Yubikey so that UEFI variables and images can be signed with the hardware token. The public certificate is stored in /etc/safeboot/cert.pem . The private key never leaves the hardware token so it is much more difficult for an adversary to clone.","title":"Yubikey key generation"},{"location":"install/#enrolling-uefi-platform-keys","text":"Replacing the UEFI Platform Key with the generated x509 cert requires that the UEFI SecureBoot firmware be put into \" Setup mode \". On the Thinkpads, select Reset to Setup Mode and Clear All Secure Boot Keys , then boot into Linux. To load the public key from /etc/safeboot/cert.pem into the UEFI secure boot key database: sudo safeboot uefi-sign-keys Once the key has been generated, the x509 certificate needs to be reformatted to be added to the UEFI Secure Boot platform key ( PK ), Key-Exchange Key ( KEK ) and as a key database entry ( db ). Each of these updates needs to be signed with the Platform Key; in the case of the PK it is self-signed. The safeboot uefi-sign-keys subcommand will: Generate the three EFI public key variables updates (UEFI platform key ( PK ), key-exchange key ( KEK ) and database ( db )) Sign the EFI variables with the Yubikey or OpenSSL key (will require a PIN authentication for each variable) Store the signed public certificates into the firmware. Danger Before you reboot! If you have not signed the kernel and initrd as described above, the system will not boot and you will have to disable UEFI Secure Boot to get back into the machine.","title":"Enrolling UEFI Platform Keys"},{"location":"install/#signed-linux-recovery-kernel","text":"Warning If you don't have a recovery entry in the EFI boot manager on the disk, you would need to have a USB drive signed with a key in the UEFI db to recover from errors. The next step is to use the Yubikey or OpenSSL key to sign and install a recovery kernel, which will be able to read/write mount the root filesystem, and does not have TPM sealing keys, so it will always require a recovery password to decrypt the disk. sudo safeboot recovery-sign This command will: Add UEFI boot menu item for recovery kernel Create a directory for it in the EFI System Partition (\"ESP\") Merge the vmlinux, initrd and command line into a single EFI executable Sign the merged EFI executable Typically you will not have to redo this command since the normal kernel will be hashed and signed during updates. The one exception is that once SIP mode is enabled you will have to resign the recovery image as well to ensure that it doesn't accidentally write to the / file system and corrupt the hashes.","title":"Signed Linux recovery kernel"},{"location":"install/#tpm-configuration","text":"The command to seal the LUKS disk encryption key into the TPM is: sudo safeboot luks-seal sudo update-initramfs -u The very first time this is run you will need to also rebuild the initrd with the new crypttab and hooks in place. The luks-seal subcommand will: Create a new disk encryption key with random data Read the current PCRs, seal new key into the TPM with these PCRs Add new key slot to disk with new key (will require the recovery password) Add initramfs building hooks Modify /etc/crypttab entry to call unlock script if necessary The Trusted Platform Module serves two purposes in securing the process: it helps validate that the firmware and boot configuration is unchanged, and it streamlines the boot process by providing the key for encrypted disks. On modern systems Boot Guard ensures that the initial boot block is measured into the TPM, so a local attacker shouldn't be able to modify the SPI flash contents to bypass the measurements, or to add their own keys to the UEFI key database. (Subject to various CVE's and TOCTOUs, etc) Note The TPM PCRs are somewhat fragile; they include hashes of the ROM images, the EFI executables that have been run along the boot path, etc. For example, entering the UEFI Setup menu will cause different measurements, so the TPM will not automatically unseal on the same boot that the user has entered the setup application.","title":"TPM Configuration"},{"location":"install/#system-integrity-protection-mode","text":"Note The \"SIP\" mode is optional and ensures that even an attacker with root priviledges can't make persistent changes to the contents of the root filesystem. It uses the same dmverity as Android's verified boot mode. The root of the dm-verity Merkle-tree is passed to the kernel as part of the signed command line, ensuring that an attacker can't change anything on the filesystem without access to the signing key. Any modifications to the filesystem will be detected when the modified blocks are read, allowing the system to enter recovery mode to protect its data.","title":"System Integrity Protection mode"},{"location":"install/#ro-and-rw-partition-setup","text":"There is some manual work in a live CD that needs to be done to prepare the system for SIP mode (since / can't be mounted while it is worked on); it is easiest to do this before setting the SecureBoot config so that you can still boot a stock Live CD. Ubuntu installer used to allow you to configure the partitions at install time, but for some reason it no longer does so. The root filesystem needs to be resized so that hash computation doesn't take forever, /home and /var need to be split into a separate mounts, /tmp needs to be a symlink to /var/tmp , etc. So boot into a live CD, open a terminal and run these commands (change /dev/sda3 to the physical disk that you've installed on): sudo cryptsetup luksOpen /dev/sda3 sda3_crypt sudo vgscan sudo fsck -f /dev/vgubuntu/root sudo resize2fs /dev/vgubuntu/root 8G # This will take a while sudo lvresize --size 8G /dev/vgubuntu/root Once that is done you can reboot into the system and configure SIP (which will setup the /var and /home filesystems, add them to /etc/fstab , relocate /tmp , build the initial dmverity hashes, and add the signed linux to the efi boot menu): safeboot sip-init","title":"RO and RW Partition setup"},{"location":"install/#hasing-and-signing-the-ro-root-filesystem","text":"When exiting recovery mode it is necessary to rehash the root filesystem and sign the kernel command line: sudo safeboot linux-sign The linux-sign command will: unmount / and remount it ro fsck / to ensure that it is clean run veritysetup format to compute the Merkle-tree for /dev/vgubuntu/root write the hashes to /dev/vgubuntu/hashes merge the linux kernel, initrd, and a command line with the dmverity root hash into an EFI executable sign this executable and install it as the default entry in the EFI boot manager Because this might change the EFI boot manager, it is necessary to reboot into the SIP mode and then re-seal the TPM key with safeboot luks-seal as documented above. TODO: Detect changes and notify the use rather than just EIO .","title":"Hasing and signing the RO root filesystem"},{"location":"install/#updates","text":"Nothing ever stays static, so it is important to consider the steps for updating the system. Frequently the root file system and kernel will be updated together, so these steps can be batched. Hopefully TPM re-sealing doesn't have to happen as often, since it requires access to the disk encryption recovery key.","title":"Updates"},{"location":"install/#root-filesystem-updates","text":"To re-enter recovery mode, remount the / filesystem read/write and re-hash the filesystem for normal mode: sudo safeboot recovery-reboot # enter the disk recovery password and login sudo safeboot remount # do stuff to / like apt-get ... sudo safeboot linux-sign reboot The recovery-reboot and remount subcommands: Set the UEFI Boot Manager BootNext to recovery Reboot the machine Require a manual disk decryption recovery code Runs blockdev --setrw to re-enable writes to the root device Runs mount -o rw,remount / to re-enable writes to the root filesystem After updating the file system with tools like apt install ... , the linux-sign subcommand will: Run mount -o ro,remount / to make the root filesystem readonly fsck / to ensure that it is clean veritysetup format to compute the merkle-tree Use the Yubikey or OpenSSL key to sign the merkle-tree root hash Reboot to the new read-only runtime If you are maintaining a fleet of machines, these could be done offline and the block image pushed to the system for installation.","title":"Root filesystem updates"},{"location":"install/#kernel-and-initramfs-update","text":"Re-generate /boot/initrd and /boot/vmlinuz Merge the kernel, initrd and command line into a single EFI executable Use the hardware token to sign that executable Copy the signed image to the EFI boot partition These could be done offline and the block image pushed to the system for installation","title":"Kernel and initramfs update"},{"location":"install/#uefi-firmware-update","text":"If there are any updates to the UEFI firmware, such as changing the Setup variable, then the TPM sealed keys will no longer be accessible and the recovery key will be necessary to re-seal the drive. This requires access to the recovery key since a new random key is generated and needs to be stored into a keyslot on the drive.","title":"UEFI firmware update"},{"location":"safeboot/","text":"/usr/sbin/safeboot subcommands key-init subject Generate a new x509 signing key with openssl. The subject must be written as: /CN=host.example.com/OU=test/O=example.com/ yubikey-init subject Generate a new x509 signing key on an attached Yubikey device and set the certificate subject to the provided argument. The subject must be written as: /CN=host.example.com/OU=test/O=example.com/ uefi-sign-keys Create three signed certificates for the PK, KEK, and db using the attached Yubikey and store them in the UEFI SecureBoot configuration. You will have to authenticate to the yubikey multiple times during this process. uefi-set-keys Store the PK, KEK, and db into the UEFI Secure Boot configuration variables. This must be done once during system setup. luks-seal [0,2,5,7... 14] Generate a new LUKS encryption key for the block devices in /etc/crypttab, sealed with the optional comma separated list of TPM PCRs. PCR 14 will be used to indicate a 'postboot' status to prevent the key from being unsealed after the initramfs has run. If this is the first time the disk has been sealed, /etc/crypttab will be updated to include a call to the unsealing script to retrieve the keys from the TPM. You will have to run 'sudo update-initramfs -u' to rebuild the initrd. Right now only a single crypt disk is supported. sign-kernel 'boot-name' parameters... Create an EFI boot menu entry for 'boot-name', with the specified kernel, initrd and command line bundled into an executable and signed. This is the raw command; you might want to use hash-and-sign or recovery-sign instead. linux-sign [target [parameters...]] Generate dm-verity hashes and then sign the Linux with the root hash added to the kernel command line. If HASH is set in the environment, it will be used instead of recomputing the dmverity hashes (which can take some time). recovery-sign [kernel command line...] Sign the Linux kernel and initrd into the recovery target. If SIP is enabled the root device will be marked read-only and not-fsck'ed. Use 'safeboot remount' to remount it read-write when in recovery mode. recovery-reboot Configure the next boot for a recovery and reboot the machine. remount Attempt to remount the root filesystem read/write. If SIP is enabled this will likely invalidate any hashes and require a re-signing of the root filesystem. sip-init home-size [var-size] DANGER! This command can mess up your root filesystem. There must be space in the volume group for the new entries Create the volume groups for /var and /home, adds entries to /etc/fstab for them, and makes /tmp a symlink into /var/tmp.","title":"`/usr/sbin/safeboot` subcommands"},{"location":"safeboot/#usrsbinsafeboot-subcommands","text":"","title":"/usr/sbin/safeboot subcommands"},{"location":"safeboot/#key-init-subject","text":"Generate a new x509 signing key with openssl. The subject must be written as: /CN=host.example.com/OU=test/O=example.com/","title":"key-init subject"},{"location":"safeboot/#yubikey-init-subject","text":"Generate a new x509 signing key on an attached Yubikey device and set the certificate subject to the provided argument. The subject must be written as: /CN=host.example.com/OU=test/O=example.com/","title":"yubikey-init subject"},{"location":"safeboot/#uefi-sign-keys","text":"Create three signed certificates for the PK, KEK, and db using the attached Yubikey and store them in the UEFI SecureBoot configuration. You will have to authenticate to the yubikey multiple times during this process.","title":"uefi-sign-keys"},{"location":"safeboot/#uefi-set-keys","text":"Store the PK, KEK, and db into the UEFI Secure Boot configuration variables. This must be done once during system setup.","title":"uefi-set-keys"},{"location":"safeboot/#luks-seal-0257-14","text":"Generate a new LUKS encryption key for the block devices in /etc/crypttab, sealed with the optional comma separated list of TPM PCRs. PCR 14 will be used to indicate a 'postboot' status to prevent the key from being unsealed after the initramfs has run. If this is the first time the disk has been sealed, /etc/crypttab will be updated to include a call to the unsealing script to retrieve the keys from the TPM. You will have to run 'sudo update-initramfs -u' to rebuild the initrd. Right now only a single crypt disk is supported.","title":"luks-seal [0,2,5,7... 14]"},{"location":"safeboot/#sign-kernel-boot-name-parameters","text":"Create an EFI boot menu entry for 'boot-name', with the specified kernel, initrd and command line bundled into an executable and signed. This is the raw command; you might want to use hash-and-sign or recovery-sign instead.","title":"sign-kernel 'boot-name' parameters..."},{"location":"safeboot/#linux-sign-target-parameters","text":"Generate dm-verity hashes and then sign the Linux with the root hash added to the kernel command line. If HASH is set in the environment, it will be used instead of recomputing the dmverity hashes (which can take some time).","title":"linux-sign [target [parameters...]]"},{"location":"safeboot/#recovery-sign-kernel-command-line","text":"Sign the Linux kernel and initrd into the recovery target. If SIP is enabled the root device will be marked read-only and not-fsck'ed. Use 'safeboot remount' to remount it read-write when in recovery mode.","title":"recovery-sign [kernel command line...]"},{"location":"safeboot/#recovery-reboot","text":"Configure the next boot for a recovery and reboot the machine.","title":"recovery-reboot"},{"location":"safeboot/#remount","text":"Attempt to remount the root filesystem read/write. If SIP is enabled this will likely invalidate any hashes and require a re-signing of the root filesystem.","title":"remount"},{"location":"safeboot/#sip-init-home-size-var-size","text":"DANGER! This command can mess up your root filesystem. There must be space in the volume group for the new entries Create the volume groups for /var and /home, adds entries to /etc/fstab for them, and makes /tmp a symlink into /var/tmp.","title":"sip-init home-size [var-size]"}]}